// Generated by gencpp from file msg_send/my_msg.msg
// DO NOT EDIT!


#ifndef MSG_SEND_MESSAGE_MY_MSG_H
#define MSG_SEND_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_send
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : first_name()
    , last_name()
    , age(0)
    , score(0)
    , phone_number()
    , id_number(0)  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : first_name(_alloc)
    , last_name(_alloc)
    , age(0)
    , score(0)
    , phone_number(_alloc)
    , id_number(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _first_name_type;
  _first_name_type first_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _last_name_type;
  _last_name_type last_name;

   typedef int32_t _age_type;
  _age_type age;

   typedef int32_t _score_type;
  _score_type score;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _phone_number_type;
  _phone_number_type phone_number;

   typedef int32_t _id_number_type;
  _id_number_type id_number;





  typedef boost::shared_ptr< ::msg_send::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_send::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::msg_send::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::msg_send::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::msg_send::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_send::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_send::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_send::my_msg_<ContainerAllocator1> & lhs, const ::msg_send::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.first_name == rhs.first_name &&
    lhs.last_name == rhs.last_name &&
    lhs.age == rhs.age &&
    lhs.score == rhs.score &&
    lhs.phone_number == rhs.phone_number &&
    lhs.id_number == rhs.id_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_send::my_msg_<ContainerAllocator1> & lhs, const ::msg_send::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_send

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_send::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_send::my_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_send::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_send::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_send::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_send::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_send::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e13415c121906a5a55d36b792282135";
  }

  static const char* value(const ::msg_send::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e13415c121906a5ULL;
  static const uint64_t static_value2 = 0xa55d36b792282135ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_send::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_send/my_msg";
  }

  static const char* value(const ::msg_send::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_send::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string first_name\n"
"string last_name\n"
"int32 age\n"
"int32 score\n"
"string phone_number\n"
"int32 id_number\n"
;
  }

  static const char* value(const ::msg_send::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_send::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first_name);
      stream.next(m.last_name);
      stream.next(m.age);
      stream.next(m.score);
      stream.next(m.phone_number);
      stream.next(m.id_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_send::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_send::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "first_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.first_name);
    s << indent << "last_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.last_name);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.score);
    s << indent << "phone_number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.phone_number);
    s << indent << "id_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_SEND_MESSAGE_MY_MSG_H
